/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Provide an wrapper for global echarts
 * ```typescript
 * export class AppComponent implements onInit {
 *   constructor(private nes: NgxEchartsService) {}
 *
 *   ngOnInit() {
 *     // const points = ...;
 *     // const rect = ...;
 *
 *     // Get native global echarts object, then call native function
 *     const echarts = this.nes.echarts;
 *     const points = echarts.graphic.clipPointsByRect(points, rect);
 *
 *     // Or call wrapper function directly:
 *     const points = this.nes.graphic.clipPointsByRect(points, rect);
 *   }
 * }
 * ```
 */
export class NgxEchartsService {
    constructor() { }
    /**
     * Get global echarts object
     * @return {?}
     */
    get echarts() {
        return echarts;
    }
    /**
     * Wrapper for echarts.graphic
     * @return {?}
     */
    get graphic() {
        return this._checkEcharts() ? echarts.graphic : undefined;
    }
    /**
     * Wrapper for echarts.init
     * @return {?}
     */
    get init() {
        return this._checkEcharts() ? echarts.init : undefined;
    }
    /**
     * Wrapper for echarts.connect
     * @return {?}
     */
    get connect() {
        return this._checkEcharts() ? echarts.connect : undefined;
    }
    /**
     * Wrapper for echarts.disconnect
     * @return {?}
     */
    get disconnect() {
        return this._checkEcharts() ? echarts.disconnect : undefined;
    }
    /**
     * Wrapper for echarts.dispose
     * @return {?}
     */
    get dispose() {
        return this._checkEcharts() ? echarts.dispose : undefined;
    }
    /**
     * Wrapper for echarts.getInstanceByDom
     * @return {?}
     */
    get getInstanceByDom() {
        return this._checkEcharts() ? echarts.getInstanceByDom : undefined;
    }
    /**
     * Wrapper for echarts.registerMap
     * @return {?}
     */
    get registerMap() {
        return this._checkEcharts() ? echarts.registerMap : undefined;
    }
    /**
     * Wrapper for echarts.getMap
     * @return {?}
     */
    get getMap() {
        return this._checkEcharts() ? echarts.getMap : undefined;
    }
    /**
     * Wrapper for echarts.registerTheme
     * @return {?}
     */
    get registerTheme() {
        return this._checkEcharts() ? echarts.registerTheme : undefined;
    }
    /**
     * @return {?}
     */
    _checkEcharts() {
        if (echarts) {
            return true;
        }
        else {
            console.error('[ngx-echarts] global ECharts not loaded');
            return false;
        }
    }
}
NgxEchartsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxEchartsService.ctorParameters = () => [];
/** @nocollapse */ NgxEchartsService.ngInjectableDef = i0.defineInjectable({ factory: function NgxEchartsService_Factory() { return new NgxEchartsService(); }, token: NgxEchartsService, providedIn: "root" });
function NgxEchartsService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxEchartsService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxEchartsService.ctorParameters;
}
//# sourceMappingURL=ngx-echarts.service.js.map
