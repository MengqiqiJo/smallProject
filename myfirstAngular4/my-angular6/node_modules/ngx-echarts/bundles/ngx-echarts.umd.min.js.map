{
  "version": 3,
  "file": "ngx-echarts.umd.min.js",
  "sources": [
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/ngx-echarts.service.ts",
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/change-filter.ts",
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/ngx-echarts.directive.ts",
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/ngx-echarts.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\r\n\r\ndeclare var echarts: any;\r\n\r\n/**\r\n * Provide an wrapper for global echarts\r\n * ```typescript\r\n * export class AppComponent implements onInit {\r\n *   constructor(private nes: NgxEchartsService) {}\r\n *\r\n *   ngOnInit() {\r\n *     // const points = ...;\r\n *     // const rect = ...;\r\n *\r\n *     // Get native global echarts object, then call native function\r\n *     const echarts = this.nes.echarts;\r\n *     const points = echarts.graphic.clipPointsByRect(points, rect);\r\n *\r\n *     // Or call wrapper function directly:\r\n *     const points = this.nes.graphic.clipPointsByRect(points, rect);\r\n *   }\r\n * }\r\n * ```\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxEchartsService {\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Get global echarts object\r\n   */\r\n  get echarts(): any {\r\n    return echarts;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.graphic\r\n   */\r\n  get graphic(): any {\r\n    return this._checkEcharts() ? echarts.graphic : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.init\r\n   */\r\n  get init(): any {\r\n    return this._checkEcharts() ? echarts.init : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.connect\r\n   */\r\n  get connect(): any {\r\n    return this._checkEcharts() ? echarts.connect : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.disconnect\r\n   */\r\n  get disconnect(): any {\r\n    return this._checkEcharts() ? echarts.disconnect : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.dispose\r\n   */\r\n  get dispose(): any {\r\n    return this._checkEcharts() ? echarts.dispose : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.getInstanceByDom\r\n   */\r\n  get getInstanceByDom(): any {\r\n    return this._checkEcharts() ? echarts.getInstanceByDom : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.registerMap\r\n   */\r\n  get registerMap(): any {\r\n    return this._checkEcharts() ? echarts.registerMap : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.getMap\r\n   */\r\n  get getMap(): any {\r\n    return this._checkEcharts() ? echarts.getMap : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.registerTheme\r\n   */\r\n  get registerTheme(): any {\r\n    return this._checkEcharts() ? echarts.registerTheme : undefined;\r\n  }\r\n\r\n  private _checkEcharts() {\r\n    if (echarts) {\r\n      return true;\r\n    } else {\r\n      console.error('[ngx-echarts] global ECharts not loaded');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
    "import { SimpleChanges } from '@angular/core';\r\nimport { Observable, of, empty } from 'rxjs';\r\n\r\nexport class ChangeFilter {\r\n  constructor(private _changes: SimpleChanges) { }\r\n\r\n  static of(changes: SimpleChanges) {\r\n    return new ChangeFilter(changes);\r\n  }\r\n\r\n  notEmpty<T>(key: string): Observable<T> {\r\n    if (this._changes[key]) {\r\n      const value: T = this._changes[key].currentValue;\r\n\r\n      if (value !== undefined && value !== null) {\r\n        return of(value);\r\n      }\r\n    }\r\n    return empty();\r\n  }\r\n\r\n  has<T>(key: string): Observable<T> {\r\n    if (this._changes[key]) {\r\n      const value: T = this._changes[key].currentValue;\r\n      return of(value);\r\n    }\r\n    return empty();\r\n  }\r\n}\r\n",
    "import {\r\n  Directive, ElementRef, Renderer, Input, Output, HostListener, EventEmitter,\r\n  OnChanges, OnDestroy, SimpleChanges, NgZone, DoCheck\r\n} from '@angular/core';\r\nimport { ChangeFilter } from './change-filter';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\ndeclare var echarts: any;\r\n\r\n@Directive({\r\n  selector: 'echarts, [echarts]'\r\n})\r\nexport class NgxEchartsDirective implements OnChanges, OnDestroy, DoCheck {\r\n  @Input() options: any;\r\n  @Input() theme: string;\r\n  @Input() loading: boolean;\r\n  @Input() initOpts: any;\r\n  @Input() merge: any;\r\n  @Input() autoResize = true;\r\n  @Input() loadingType = 'default';\r\n  @Input() loadingOpts: any;\r\n\r\n  // chart events:\r\n  @Output() chartInit = new EventEmitter<any>();\r\n  @Output() chartClick = new EventEmitter<any>();\r\n  @Output() chartDblClick = new EventEmitter<any>();\r\n  @Output() chartMouseDown = new EventEmitter<any>();\r\n  @Output() chartMouseUp = new EventEmitter<any>();\r\n  @Output() chartMouseOver = new EventEmitter<any>();\r\n  @Output() chartMouseOut = new EventEmitter<any>();\r\n  @Output() chartGlobalOut = new EventEmitter<any>();\r\n  @Output() chartContextMenu = new EventEmitter<any>();\r\n  @Output() chartDataZoom = new EventEmitter<any>();\r\n\r\n  private _chart: any = null;\r\n  private currentOffsetWidth = 0;\r\n  private currentOffsetHeight = 0;\r\n  private currentWindowWidth: any = null;\r\n  private _resize$ = new Subject<any>();\r\n  private _resizeSub: Subscription;\r\n\r\n  constructor(private el: ElementRef, private _ngZone: NgZone) { }\r\n\r\n  private createChart() {\r\n    this.currentWindowWidth = window.innerWidth;\r\n    this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\r\n    this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\r\n    const dom = this.el.nativeElement;\r\n\r\n    if (window && window.getComputedStyle) {\r\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\r\n      if ((!prop || prop === '0px') &&\r\n        (!dom.style.height || dom.style.height === '0px')) {\r\n        dom.style.height = '400px';\r\n      }\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => echarts.init(dom, this.theme || undefined, this.initOpts || undefined));\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onWindowResize(event: any) {\r\n    if (this.autoResize && event.target.innerWidth !== this.currentWindowWidth) {\r\n      this.currentWindowWidth = event.target.innerWidth;\r\n      this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\r\n      this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\r\n\r\n      this._resize$.next();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filter = ChangeFilter.of(changes);\r\n    filter.notEmpty<any>('options').subscribe(opt => this.onOptionsChange(opt));\r\n    filter.notEmpty<any>('merge').subscribe(opt => this.setOption(opt));\r\n    filter.has<boolean>('loading').subscribe(v => this.toggleLoading(!!v));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._resizeSub) {\r\n      this._resizeSub.unsubscribe();\r\n      this._resizeSub = null;\r\n    }\r\n\r\n    if (this._chart) {\r\n      this._chart.dispose();\r\n      this._chart = null;\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // No heavy work in DoCheck!\r\n    if (this._chart && this.autoResize) {\r\n      const offsetWidth = this.el.nativeElement.offsetWidth;\r\n      const offsetHeight = this.el.nativeElement.offsetHeight;\r\n\r\n      if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\r\n        this.currentOffsetWidth = offsetWidth;\r\n        this.currentOffsetHeight = offsetHeight;\r\n        this._resize$.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  private onOptionsChange(opt: any) {\r\n    if (opt) {\r\n      if (!this._chart) {\r\n        this._chart = this.createChart();\r\n\r\n        // subscribe to _resize$ and debounced\r\n        this._resizeSub = this._resize$.pipe(debounceTime(50)).subscribe(() => {\r\n          if (this._chart) {\r\n            this._chart.resize();\r\n          }\r\n        });\r\n\r\n        // output echart instance:\r\n        this.chartInit.emit(this._chart);\r\n\r\n        // register events:\r\n        this.registerEvents(this._chart);\r\n      }\r\n\r\n      this._chart.setOption(this.options, true);\r\n\r\n      /**\r\n       * Bugfix: Line chart is not animated on init\r\n       * https://github.com/xieziyu/ngx-echarts/issues/102\r\n       */\r\n      // this._chart.resize();\r\n    }\r\n  }\r\n\r\n  private registerEvents(_chart: any) {\r\n    if (_chart) {\r\n      // register mouse events:\r\n      _chart.on('click', e => this._ngZone.run(() => this.chartClick.emit(e)));\r\n      _chart.on('dblClick', e => this._ngZone.run(() => this.chartDblClick.emit(e)));\r\n      _chart.on('mousedown', e => this._ngZone.run(() => this.chartMouseDown.emit(e)));\r\n      _chart.on('mouseup', e => this._ngZone.run(() => this.chartMouseUp.emit(e)));\r\n      _chart.on('mouseover', e => this._ngZone.run(() => this.chartMouseOver.emit(e)));\r\n      _chart.on('mouseout', e => this._ngZone.run(() => this.chartMouseOut.emit(e)));\r\n      _chart.on('globalout', e => this._ngZone.run(() => this.chartGlobalOut.emit(e)));\r\n      _chart.on('contextmenu', e => this._ngZone.run(() => this.chartContextMenu.emit(e)));\r\n      // other events;\r\n      _chart.on('datazoom', e => this._ngZone.run(() => this.chartDataZoom.emit(e)));\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this._chart) {\r\n      this._chart.clear();\r\n    }\r\n  }\r\n\r\n  toggleLoading(loading: boolean) {\r\n    if (this._chart) {\r\n      loading ? this._chart.showLoading(this.loadingType, this.loadingOpts) : this._chart.hideLoading();\r\n    }\r\n  }\r\n\r\n  setOption(option: any, opts?: any) {\r\n    if (this._chart) {\r\n      this._chart.setOption(option, opts);\r\n    }\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { NgxEchartsDirective } from './ngx-echarts.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [\r\n    NgxEchartsDirective\r\n  ],\r\n  exports: [\r\n    NgxEchartsDirective\r\n  ]\r\n})\r\nexport class NgxEchartsModule { }\r\n"
  ],
  "names": [
    "NgxEchartsService",
    "get",
    "Object",
    "defineProperty",
    "prototype",
    "this",
    "_checkEcharts",
    "echarts",
    "graphic",
    "undefined",
    "enumerable",
    "configurable",
    "connect",
    "dispose",
    "getInstanceByDom",
    "registerMap",
    "ChangeFilter",
    "_changes",
    "of",
    "changes",
    "notEmpty",
    "key",
    "value",
    "currentValue",
    "empty",
    "has",
    "NgxEchartsDirective",
    "el",
    "_ngZone",
    "autoResize",
    "loadingType",
    "chartInit",
    "EventEmitter",
    "chartClick",
    "chartDblClick",
    "chartMouseDown",
    "chartMouseUp",
    "chartMouseOver",
    "chartMouseOut",
    "chartGlobalOut",
    "chartContextMenu",
    "chartDataZoom",
    "_chart",
    "currentOffsetWidth",
    "currentOffsetHeight",
    "currentWindowWidth",
    "_resize$",
    "Subject",
    "createChart",
    "_this",
    "window",
    "innerWidth",
    "nativeElement",
    "offsetWidth",
    "offsetHeight",
    "dom",
    "getComputedStyle",
    "prop",
    "getPropertyValue",
    "style",
    "height",
    "onWindowResize",
    "event",
    "target",
    "next",
    "ngOnChanges",
    "filter",
    "subscribe",
    "opt",
    "onOptionsChange",
    "setOption",
    "ngOnDestroy",
    "_resizeSub",
    "unsubscribe",
    "ngDoCheck",
    "pipe",
    "debounceTime",
    "emit",
    "registerEvents",
    "on",
    "e",
    "run",
    "clear",
    "toggleLoading",
    "loading",
    "option",
    "opts",
    "type",
    "Directive",
    "args",
    "selector",
    "ctorParameters",
    "ElementRef",
    "NgZone",
    "propDecorators",
    "options",
    "Input",
    "theme",
    "initOpts",
    "merge",
    "loadingOpts",
    "Output",
    "NgxEchartsModule",
    "decorators",
    "NgModule",
    "imports",
    "declarations"
  ],
  "mappings": "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"
}
