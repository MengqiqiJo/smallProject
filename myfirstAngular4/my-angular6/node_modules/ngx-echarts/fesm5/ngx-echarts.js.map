{
  "version": 3,
  "file": "ngx-echarts.js",
  "sources": [
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/ngx-echarts.module.ts",
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/ngx-echarts.directive.ts",
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/change-filter.ts",
    "ng://ngx-echarts/projects/ngx-echarts/src/lib/ngx-echarts.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\r\nimport { NgxEchartsDirective } from './ngx-echarts.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [\r\n    NgxEchartsDirective\r\n  ],\r\n  exports: [\r\n    NgxEchartsDirective\r\n  ]\r\n})\r\nexport class NgxEchartsModule { }\r\n",
    "import {\r\n  Directive, ElementRef, Renderer, Input, Output, HostListener, EventEmitter,\r\n  OnChanges, OnDestroy, SimpleChanges, NgZone, DoCheck\r\n} from '@angular/core';\r\nimport { ChangeFilter } from './change-filter';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\ndeclare var echarts: any;\r\n\r\n@Directive({\r\n  selector: 'echarts, [echarts]'\r\n})\r\nexport class NgxEchartsDirective implements OnChanges, OnDestroy, DoCheck {\r\n  @Input() options: any;\r\n  @Input() theme: string;\r\n  @Input() loading: boolean;\r\n  @Input() initOpts: any;\r\n  @Input() merge: any;\r\n  @Input() autoResize = true;\r\n  @Input() loadingType = 'default';\r\n  @Input() loadingOpts: any;\r\n\r\n  // chart events:\r\n  @Output() chartInit = new EventEmitter<any>();\r\n  @Output() chartClick = new EventEmitter<any>();\r\n  @Output() chartDblClick = new EventEmitter<any>();\r\n  @Output() chartMouseDown = new EventEmitter<any>();\r\n  @Output() chartMouseUp = new EventEmitter<any>();\r\n  @Output() chartMouseOver = new EventEmitter<any>();\r\n  @Output() chartMouseOut = new EventEmitter<any>();\r\n  @Output() chartGlobalOut = new EventEmitter<any>();\r\n  @Output() chartContextMenu = new EventEmitter<any>();\r\n  @Output() chartDataZoom = new EventEmitter<any>();\r\n\r\n  private _chart: any = null;\r\n  private currentOffsetWidth = 0;\r\n  private currentOffsetHeight = 0;\r\n  private currentWindowWidth: any = null;\r\n  private _resize$ = new Subject<any>();\r\n  private _resizeSub: Subscription;\r\n\r\n  constructor(private el: ElementRef, private _ngZone: NgZone) { }\r\n\r\n  private createChart() {\r\n    this.currentWindowWidth = window.innerWidth;\r\n    this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\r\n    this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\r\n    const dom = this.el.nativeElement;\r\n\r\n    if (window && window.getComputedStyle) {\r\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\r\n      if ((!prop || prop === '0px') &&\r\n        (!dom.style.height || dom.style.height === '0px')) {\r\n        dom.style.height = '400px';\r\n      }\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => echarts.init(dom, this.theme || undefined, this.initOpts || undefined));\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onWindowResize(event: any) {\r\n    if (this.autoResize && event.target.innerWidth !== this.currentWindowWidth) {\r\n      this.currentWindowWidth = event.target.innerWidth;\r\n      this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\r\n      this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\r\n\r\n      this._resize$.next();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filter = ChangeFilter.of(changes);\r\n    filter.notEmpty<any>('options').subscribe(opt => this.onOptionsChange(opt));\r\n    filter.notEmpty<any>('merge').subscribe(opt => this.setOption(opt));\r\n    filter.has<boolean>('loading').subscribe(v => this.toggleLoading(!!v));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._resizeSub) {\r\n      this._resizeSub.unsubscribe();\r\n      this._resizeSub = null;\r\n    }\r\n\r\n    if (this._chart) {\r\n      this._chart.dispose();\r\n      this._chart = null;\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // No heavy work in DoCheck!\r\n    if (this._chart && this.autoResize) {\r\n      const offsetWidth = this.el.nativeElement.offsetWidth;\r\n      const offsetHeight = this.el.nativeElement.offsetHeight;\r\n\r\n      if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\r\n        this.currentOffsetWidth = offsetWidth;\r\n        this.currentOffsetHeight = offsetHeight;\r\n        this._resize$.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  private onOptionsChange(opt: any) {\r\n    if (opt) {\r\n      if (!this._chart) {\r\n        this._chart = this.createChart();\r\n\r\n        // subscribe to _resize$ and debounced\r\n        this._resizeSub = this._resize$.pipe(debounceTime(50)).subscribe(() => {\r\n          if (this._chart) {\r\n            this._chart.resize();\r\n          }\r\n        });\r\n\r\n        // output echart instance:\r\n        this.chartInit.emit(this._chart);\r\n\r\n        // register events:\r\n        this.registerEvents(this._chart);\r\n      }\r\n\r\n      this._chart.setOption(this.options, true);\r\n\r\n      /**\r\n       * Bugfix: Line chart is not animated on init\r\n       * https://github.com/xieziyu/ngx-echarts/issues/102\r\n       */\r\n      // this._chart.resize();\r\n    }\r\n  }\r\n\r\n  private registerEvents(_chart: any) {\r\n    if (_chart) {\r\n      // register mouse events:\r\n      _chart.on('click', e => this._ngZone.run(() => this.chartClick.emit(e)));\r\n      _chart.on('dblClick', e => this._ngZone.run(() => this.chartDblClick.emit(e)));\r\n      _chart.on('mousedown', e => this._ngZone.run(() => this.chartMouseDown.emit(e)));\r\n      _chart.on('mouseup', e => this._ngZone.run(() => this.chartMouseUp.emit(e)));\r\n      _chart.on('mouseover', e => this._ngZone.run(() => this.chartMouseOver.emit(e)));\r\n      _chart.on('mouseout', e => this._ngZone.run(() => this.chartMouseOut.emit(e)));\r\n      _chart.on('globalout', e => this._ngZone.run(() => this.chartGlobalOut.emit(e)));\r\n      _chart.on('contextmenu', e => this._ngZone.run(() => this.chartContextMenu.emit(e)));\r\n      // other events;\r\n      _chart.on('datazoom', e => this._ngZone.run(() => this.chartDataZoom.emit(e)));\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    if (this._chart) {\r\n      this._chart.clear();\r\n    }\r\n  }\r\n\r\n  toggleLoading(loading: boolean) {\r\n    if (this._chart) {\r\n      loading ? this._chart.showLoading(this.loadingType, this.loadingOpts) : this._chart.hideLoading();\r\n    }\r\n  }\r\n\r\n  setOption(option: any, opts?: any) {\r\n    if (this._chart) {\r\n      this._chart.setOption(option, opts);\r\n    }\r\n  }\r\n}\r\n",
    "import { SimpleChanges } from '@angular/core';\r\nimport { Observable, of, empty } from 'rxjs';\r\n\r\nexport class ChangeFilter {\r\n  constructor(private _changes: SimpleChanges) { }\r\n\r\n  static of(changes: SimpleChanges) {\r\n    return new ChangeFilter(changes);\r\n  }\r\n\r\n  notEmpty<T>(key: string): Observable<T> {\r\n    if (this._changes[key]) {\r\n      const value: T = this._changes[key].currentValue;\r\n\r\n      if (value !== undefined && value !== null) {\r\n        return of(value);\r\n      }\r\n    }\r\n    return empty();\r\n  }\r\n\r\n  has<T>(key: string): Observable<T> {\r\n    if (this._changes[key]) {\r\n      const value: T = this._changes[key].currentValue;\r\n      return of(value);\r\n    }\r\n    return empty();\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\ndeclare var echarts: any;\r\n\r\n/**\r\n * Provide an wrapper for global echarts\r\n * ```typescript\r\n * export class AppComponent implements onInit {\r\n *   constructor(private nes: NgxEchartsService) {}\r\n *\r\n *   ngOnInit() {\r\n *     // const points = ...;\r\n *     // const rect = ...;\r\n *\r\n *     // Get native global echarts object, then call native function\r\n *     const echarts = this.nes.echarts;\r\n *     const points = echarts.graphic.clipPointsByRect(points, rect);\r\n *\r\n *     // Or call wrapper function directly:\r\n *     const points = this.nes.graphic.clipPointsByRect(points, rect);\r\n *   }\r\n * }\r\n * ```\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxEchartsService {\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Get global echarts object\r\n   */\r\n  get echarts(): any {\r\n    return echarts;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.graphic\r\n   */\r\n  get graphic(): any {\r\n    return this._checkEcharts() ? echarts.graphic : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.init\r\n   */\r\n  get init(): any {\r\n    return this._checkEcharts() ? echarts.init : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.connect\r\n   */\r\n  get connect(): any {\r\n    return this._checkEcharts() ? echarts.connect : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.disconnect\r\n   */\r\n  get disconnect(): any {\r\n    return this._checkEcharts() ? echarts.disconnect : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.dispose\r\n   */\r\n  get dispose(): any {\r\n    return this._checkEcharts() ? echarts.dispose : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.getInstanceByDom\r\n   */\r\n  get getInstanceByDom(): any {\r\n    return this._checkEcharts() ? echarts.getInstanceByDom : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.registerMap\r\n   */\r\n  get registerMap(): any {\r\n    return this._checkEcharts() ? echarts.registerMap : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.getMap\r\n   */\r\n  get getMap(): any {\r\n    return this._checkEcharts() ? echarts.getMap : undefined;\r\n  }\r\n\r\n  /**\r\n   * Wrapper for echarts.registerTheme\r\n   */\r\n  get registerTheme(): any {\r\n    return this._checkEcharts() ? echarts.registerTheme : undefined;\r\n  }\r\n\r\n  private _checkEcharts() {\r\n    if (echarts) {\r\n      return true;\r\n    } else {\r\n      console.error('[ngx-echarts] global ECharts not loaded');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
